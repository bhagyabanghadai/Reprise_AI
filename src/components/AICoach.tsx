'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { useToast } from '@/components/ui/use-toast'
import { 
  Brain, Shield, Clock, Zap, ChevronDown, ChevronUp,
  MessageSquare, Sparkles, AlertTriangle, CheckCircle,
  Award, TrendingUp, Activity, Calendar
} from 'lucide-react'

interface AICoachProps {
  userId: string
  recentWorkouts?: any[]
  userStats?: any
}

interface CoachFeedback {
  type: 'insight' | 'warning' | 'achievement' | 'plan'
  title: string
  message: string
  icon: any
  color: string
}

export default function AICoach({ userId, recentWorkouts = [], userStats = {} }: AICoachProps) {
  const [loading, setLoading] = useState(false)
  const [feedback, setFeedback] = useState<CoachFeedback[]>([])
  const [weeklyPlan, setWeeklyPlan] = useState<any[]>([])
  const [recoveryStatus, setRecoveryStatus] = useState({ score: 90, message: 'Optimal recovery. Ready for high-intensity training.' })
  const [showChat, setShowChat] = useState(false)
  const [chatMessage, setChatMessage] = useState('')
  const [chatHistory, setChatHistory] = useState<{role: string, content: string}[]>([
    { role: 'assistant', content: 'I\'m your AI fitness coach. How can I help with your training today?' }
  ])
  const [expandedSection, setExpandedSection] = useState<string | null>('feedback')
  const { toast } = useToast()

  // Mock workout predictions
  const predictions = [
    { exercise: 'Bench Press', current: '185 lbs', target: '225 lbs', timeframe: '6 weeks' },
    { exercise: 'Squat', current: '275 lbs', target: '315 lbs', timeframe: '8 weeks' },
    { exercise: 'Deadlift', current: '315 lbs', target: '365 lbs', timeframe: '10 weeks' }
  ]

  // Sample weekly plan - this would be generated by the AI
  const sampleWeeklyPlan = [
    { 
      day: 'Monday', 
      focus: 'Upper Body Strength', 
      exercises: [
        { name: 'Bench Press', sets: 5, reps: 5, weight: 185, notes: 'Focus on bar path and full ROM' },
        { name: 'Pull-ups', sets: 4, reps: 8, weight: 0, notes: 'Add weight if too easy' },
        { name: 'Overhead Press', sets: 3, reps: 10, weight: 105, notes: 'Slight increase from last week' }
      ],
      completed: false
    },
    { 
      day: 'Tuesday', 
      focus: 'Active Recovery', 
      exercises: [
        { name: 'Light Cycling', sets: 1, reps: 1, weight: 0, notes: '20 minutes steady state' },
        { name: 'Mobility Work', sets: 1, reps: 1, weight: 0, notes: 'Focus on hip and shoulder mobility' }
      ],
      completed: false
    },
    { 
      day: 'Wednesday', 
      focus: 'Lower Body Power', 
      exercises: [
        { name: 'Squat', sets: 4, reps: 6, weight: 275, notes: 'Focus on explosive concentric' },
        { name: 'Romanian Deadlift', sets: 3, reps: 10, weight: 185, notes: 'Added to address posterior chain weakness' },
        { name: 'Leg Press', sets: 3, reps: 12, weight: 360, notes: 'Moderate weight, focus on control' }
      ],
      completed: false
    },
    { 
      day: 'Thursday', 
      focus: 'Rest Day', 
      exercises: [],
      completed: false
    },
    { 
      day: 'Friday', 
      focus: 'Upper Body Hypertrophy', 
      exercises: [
        { name: 'Incline Bench Press', sets: 4, reps: 10, weight: 155, notes: 'Higher volume than Monday' },
        { name: 'Barbell Rows', sets: 4, reps: 10, weight: 165, notes: 'Focus on mid-back contraction' },
        { name: 'Lateral Raises', sets: 3, reps: 15, weight: 20, notes: 'Added to address lagging shoulders' }
      ],
      completed: false
    },
    { 
      day: 'Saturday', 
      focus: 'Full Body Power', 
      exercises: [
        { name: 'Deadlift', sets: 5, reps: 3, weight: 315, notes: 'Test day - aiming for PR' },
        { name: 'Push Press', sets: 4, reps: 6, weight: 135, notes: 'Explosive movement' },
        { name: 'Pull-ups', sets: 3, reps: 10, weight: 0, notes: 'Volume focus' }
      ],
      completed: false
    },
    { 
      day: 'Sunday', 
      focus: 'Rest Day', 
      exercises: [],
      completed: false
    }
  ]

  // Sample feedback - this would be generated based on user's performance
  const sampleFeedback = [
    { 
      type: 'insight' as const, 
      title: 'Progress Insight', 
      message: 'Your bench press strength has increased by 12% this month. Consistency in upper body training is showing results.',
      icon: Sparkles,
      color: 'bg-purple-500'
    },
    { 
      type: 'warning' as const, 
      title: 'Form Warning', 
      message: 'Bar speed decreased in your last squat session. Consider reducing weight by 5-10% next workout or extending rest periods.',
      icon: AlertTriangle,
      color: 'bg-amber-500'
    },
    { 
      type: 'achievement' as const, 
      title: 'Achievement Unlocked', 
      message: 'New PR! You\'ve hit a personal record on deadlift at 315 lbs. Amazing progress!',
      icon: Award,
      color: 'bg-green-500'
    },
    { 
      type: 'plan' as const, 
      title: 'Plan Adjustment', 
      message: 'Added Romanian Deadlifts to address posterior chain weakness detected in your squat and deadlift patterns.',
      icon: TrendingUp,
      color: 'bg-blue-500'
    }
  ]

  useEffect(() => {
    // Simulate loading AI coach data
    const loadCoachData = async () => {
      setLoading(true)
      try {
        // In a real app, this would fetch from an AI endpoint
        // For now, we'll use the sample data
        await new Promise(resolve => setTimeout(resolve, 1000))
        
        setFeedback(sampleFeedback)
        setWeeklyPlan(sampleWeeklyPlan)

      } catch (error) {
        console.error('Error loading AI coach data:', error)
        toast({
          title: 'Error',
          description: 'Failed to load AI coach recommendations.',
          variant: 'destructive'
        })
      } finally {
        setLoading(false)
      }
    }

    loadCoachData()
  }, [userId, toast])

  const toggleSection = (section: string) => {
    if (expandedSection === section) {
      setExpandedSection(null)
    } else {
      setExpandedSection(section)
    }
  }

  const handleChatSubmit = async () => {
    if (!chatMessage.trim()) return

    // Add user message to chat
    const userMessage = { role: 'user', content: chatMessage }
    setChatHistory([...chatHistory, userMessage])
    setChatMessage('')

    // In a real app, this would call the AI API
    // For now, we'll simulate a response
    setLoading(true)
    try {
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Generate a mock response based on the question
      let response = "I'm not sure about that. Could you ask something related to your training?"
      
      if (chatMessage.toLowerCase().includes('plateau')) {
        response = "I've analyzed your recent workouts and noticed your bench press has plateaued. Try these strategies: 1) Add 2 sets of close-grip bench to target triceps, 2) Incorporate paused reps in your warmup sets, 3) Try a deload week to allow full recovery."
      } else if (chatMessage.toLowerCase().includes('diet') || chatMessage.toLowerCase().includes('nutrition')) {
        response = "Based on your training volume and goals, I'd recommend increasing protein intake to 1.8g per kg of bodyweight and timing carbohydrates around your workouts. Focus on whole foods with at least 5 servings of vegetables daily."
      } else if (chatMessage.toLowerCase().includes('next workout')) {
        response = "Your next workout is scheduled for tomorrow: Upper Body Strength. Based on your recovery scores, I suggest focusing on bench press (5x5 @ 185lbs) with an emphasis on controlled negatives."
      } else if (chatMessage.toLowerCase().includes('progress')) {
        response = "You're making excellent progress! Your overall strength has increased by 8% in the last month. Your squat is improving the fastest, while your overhead press could use more attention."
      }
      
      setChatHistory([...chatHistory, userMessage, { role: 'assistant', content: response }])
    } catch (error) {
      console.error('Error sending message to AI coach:', error)
      toast({
        title: 'Error',
        description: 'Failed to get a response from your AI coach. Please try again.',
        variant: 'destructive'
      })
    } finally {
      setLoading(false)
    }
  }

  const today = new Date()
  const dayOfWeek = today.getDay() // 0 = Sunday, 1 = Monday, etc.
  const todaysPlan = sampleWeeklyPlan[dayOfWeek === 0 ? 6 : dayOfWeek - 1] // Adjust for array index

  return (
    <div className="space-y-4">
      {/* Morning Briefing / Today's Plan */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-blue-900/50 to-indigo-900/50 backdrop-blur-md rounded-lg p-5 border border-blue-500/30"
      >
        <div className="flex justify-between items-start mb-3">
          <div className="flex items-center">
            <Calendar className="h-5 w-5 mr-2 text-blue-400" />
            <h2 className="text-xl font-semibold text-white">{todaysPlan.day}'s Workout</h2>
          </div>
          <div className="flex items-center bg-blue-500/20 text-blue-300 text-sm py-1 px-3 rounded-full">
            <Activity className="h-3 w-3 mr-1" /> 
            {todaysPlan.focus}
          </div>
        </div>
        
        {todaysPlan.exercises.length > 0 ? (
          <div className="space-y-3">
            {todaysPlan.exercises.map((exercise: { name: string, sets: number, reps: number, weight: number, notes?: string }, index: number) => (
              <div key={index} className="bg-white/5 p-3 rounded-lg border border-white/10 hover:border-blue-500/30 transition-colors">
                <div className="flex justify-between">
                  <div className="font-medium text-white">{exercise.name}</div>
                  <div className="text-blue-300">{exercise.sets} × {exercise.reps} {exercise.weight > 0 ? `@ ${exercise.weight} lbs` : ''}</div>
                </div>
                {exercise.notes && (
                  <div className="text-sm text-gray-400 mt-1">{exercise.notes}</div>
                )}
              </div>
            ))}
            <Button className="w-full mt-2 bg-blue-600 hover:bg-blue-700">
              Complete Today's Workout
            </Button>
          </div>
        ) : (
          <div className="text-center py-8">
            <Clock className="h-10 w-10 text-blue-400 mx-auto mb-2" />
            <p className="text-white font-medium">{todaysPlan.focus}</p>
            <p className="text-sm text-gray-400">Take time to recover and prepare for your next training session</p>
          </div>
        )}
      </motion.div>

      {/* AI Coach Feedback */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        <div 
          className="flex justify-between items-center p-4 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 backdrop-blur-md rounded-t-lg border border-purple-500/30 cursor-pointer"
          onClick={() => toggleSection('feedback')}
        >
          <div className="flex items-center">
            <Brain className="h-5 w-5 mr-2 text-purple-400" />
            <h2 className="text-xl font-semibold text-white">Coach Feedback</h2>
          </div>
          {expandedSection === 'feedback' ? (
            <ChevronUp className="h-5 w-5 text-purple-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-purple-400" />
          )}
        </div>
        
        {expandedSection === 'feedback' && (
          <div className="p-4 bg-black/20 backdrop-blur-sm rounded-b-lg border-x border-b border-purple-500/30">
            <div className="space-y-3">
              {feedback.map((item, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.1 }}
                  className={`p-3 rounded-lg border border-${item.color.replace('bg-', '')}/30 flex items-start`}
                >
                  <div className={`${item.color} p-2 rounded-full mr-3`}>
                    <item.icon className="h-4 w-4 text-white" />
                  </div>
                  <div>
                    <h3 className="text-white font-medium">{item.title}</h3>
                    <p className="text-gray-300 text-sm">{item.message}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        )}
      </motion.div>

      {/* Weekly Plan */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <div 
          className="flex justify-between items-center p-4 bg-gradient-to-r from-blue-900/50 to-cyan-900/50 backdrop-blur-md rounded-t-lg border border-blue-500/30 cursor-pointer"
          onClick={() => toggleSection('weeklyPlan')}
        >
          <div className="flex items-center">
            <Calendar className="h-5 w-5 mr-2 text-blue-400" />
            <h2 className="text-xl font-semibold text-white">Weekly Plan</h2>
          </div>
          {expandedSection === 'weeklyPlan' ? (
            <ChevronUp className="h-5 w-5 text-blue-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-blue-400" />
          )}
        </div>
        
        {expandedSection === 'weeklyPlan' && (
          <div className="p-4 bg-black/20 backdrop-blur-sm rounded-b-lg border-x border-b border-blue-500/30">
            <div className="space-y-3">
              {weeklyPlan.map((day, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.05 }}
                  className={`p-3 rounded-lg border ${
                    index === dayOfWeek - 1 || (index === 6 && dayOfWeek === 0)
                      ? 'border-blue-500/50 bg-blue-900/20'
                      : 'border-white/10'
                  } hover:border-blue-500/30 transition-colors`}
                >
                  <div className="flex justify-between items-center mb-1">
                    <div className="font-medium text-white">{day.day}</div>
                    <div className="text-sm text-blue-300">{day.focus}</div>
                  </div>
                  {day.exercises.length > 0 ? (
                    <div className="text-sm text-gray-400">
                      {day.exercises.map((exercise: { name: string, sets: number, reps: number, weight: number, notes?: string }, idx: number) => (
                        <div key={idx} className="flex justify-between py-1 border-b border-white/5 last:border-0">
                          <span>{exercise.name}</span>
                          <span>{exercise.sets}×{exercise.reps}{exercise.weight > 0 ? ` @ ${exercise.weight}` : ''}</span>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-sm text-gray-500 italic">Rest day</div>
                  )}
                </motion.div>
              ))}
            </div>
          </div>
        )}
      </motion.div>

      {/* Performance Predictions */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.3 }}
      >
        <div 
          className="flex justify-between items-center p-4 bg-gradient-to-r from-green-900/50 to-emerald-900/50 backdrop-blur-md rounded-t-lg border border-green-500/30 cursor-pointer"
          onClick={() => toggleSection('predictions')}
        >
          <div className="flex items-center">
            <TrendingUp className="h-5 w-5 mr-2 text-green-400" />
            <h2 className="text-xl font-semibold text-white">Performance Projections</h2>
          </div>
          {expandedSection === 'predictions' ? (
            <ChevronUp className="h-5 w-5 text-green-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-green-400" />
          )}
        </div>
        
        {expandedSection === 'predictions' && (
          <div className="p-4 bg-black/20 backdrop-blur-sm rounded-b-lg border-x border-b border-green-500/30">
            <div className="space-y-4">
              {predictions.map((prediction, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.1 }}
                  className="relative"
                >
                  <div className="mb-1">
                    <span className="text-white font-medium">{prediction.exercise}</span>
                    <span className="text-gray-400 ml-2 text-sm">Target: {prediction.target} in {prediction.timeframe}</span>
                  </div>
                  <div className="h-3 bg-white/10 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-gradient-to-r from-green-500 to-emerald-400" 
                      style={{ width: '65%' }}
                    ></div>
                  </div>
                  <div className="flex justify-between mt-1 text-xs">
                    <span className="text-gray-400">Current: {prediction.current}</span>
                    <span className="text-green-400">Target: {prediction.target}</span>
                  </div>
                </motion.div>
              ))}

              <div className="text-sm text-gray-400 mt-4">
                <p>These projections are based on your current progress rate and consistency. Keep up your training to achieve these goals!</p>
              </div>
            </div>
          </div>
        )}
      </motion.div>

      {/* AI Coach Chat */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
        className="bg-gradient-to-r from-cyan-900/50 to-blue-900/50 backdrop-blur-md rounded-lg border border-cyan-500/30 overflow-hidden"
      >
        <div 
          className="flex justify-between items-center p-4 cursor-pointer"
          onClick={() => setShowChat(!showChat)}
        >
          <div className="flex items-center">
            <MessageSquare className="h-5 w-5 mr-2 text-cyan-400" />
            <h2 className="text-xl font-semibold text-white">Ask Your Coach</h2>
          </div>
          {showChat ? (
            <ChevronUp className="h-5 w-5 text-cyan-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-cyan-400" />
          )}
        </div>
        
        {showChat && (
          <div className="p-4">
            <div className="h-64 overflow-y-auto mb-4 space-y-3 bg-black/20 rounded-lg p-3">
              {chatHistory.map((message, index) => (
                <div 
                  key={index}
                  className={`p-2 rounded-lg ${
                    message.role === 'assistant' 
                      ? 'bg-cyan-900/30 border border-cyan-500/30 ml-4'
                      : 'bg-blue-900/30 border border-blue-500/30 mr-4'
                  }`}
                >
                  {message.role === 'assistant' && (
                    <div className="flex items-center mb-1">
                      <Brain className="h-3 w-3 mr-1 text-cyan-400" />
                      <span className="text-xs font-medium text-cyan-400">AI Coach</span>
                    </div>
                  )}
                  <p className="text-sm text-gray-300">{message.content}</p>
                </div>
              ))}
            </div>
            
            <div className="flex space-x-2">
              <Textarea
                value={chatMessage}
                onChange={(e) => setChatMessage(e.target.value)}
                placeholder="Ask about your progress, form, or next workout..."
                className="flex-1 bg-black/20 border-cyan-500/30 text-white resize-none"
              />
              <Button 
                onClick={handleChatSubmit}
                disabled={loading || !chatMessage.trim()}
                className="bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600"
              >
                {loading ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent" />
                ) : (
                  'Send'
                )}
              </Button>
            </div>
            
            <div className="mt-3 text-xs text-gray-400">
              <p>Example questions:</p>
              <div className="flex flex-wrap gap-2 mt-1">
                {['Why am I plateauing?', 'What should my next workout be?', 'How is my progress?', 'Nutrition advice?'].map((q, i) => (
                  <button
                    key={i}
                    onClick={() => setChatMessage(q)}
                    className="px-2 py-1 bg-white/10 rounded-full text-gray-300 hover:bg-white/20 transition-colors"
                  >
                    {q}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}
      </motion.div>
    </div>
  )
}